# blog-2019-08-13  
##  计算Json层级：

### 计算机有经典的名言： “error input， error output。”
 
1. JS 解决办法：

        var data = {
            "list": [{
                "list": [ {
                    "list": [{
                        "list": [{"list": [{"four": "4", "one": "1", "three": "3", "two": "3"}], "value": "4"}],
                        "value": "3"
                    }, {
                        "list": [{
                            "list": [{"four": "4", "one": "1", "three": "4", "two": "3"}, {
                                "four": "4",
                                "one": "1",
                                "three": "4",
                                "two": "3"
                            }], "value": "4"
                        }], "value": "4"
                    }], "value": "3"
                }], "value": "1"
            }, {
                "list": [{
                    "list": [{
                        "list": [{"list": [{"four": "4", "one": "2", "three": "3", "two": "2"}], "value": "4"}],
                        "value": "3"
                    }], "value": "2"
                }], "value": "2"
            }]
        }
        var num = 0;
        function recursion(obj,k) {
            num = Math.max(num,k);
            console.log(k);
            if (obj.list)
                obj.list.forEach(function(v, i){
                    recursion(v,k+1);
                });
        }
        recursion(data,1);
        console.log("最深层级数"+num);

2.scala

    def getAttributesFromNode(node: Node): ListBuffer[Map[String, String]] ={
      val attributesList = ListBuffer[Map[String, String]]()
      //递归获取路径,生成可定位的xpath表达式
      def getParent(node: Node): Unit = {
        if (node.hasAttributes) {
          val attributes = node.getAttributes
          var attributeMap = Map[String, String]()
    
          0 until attributes.getLength foreach (i => {
            val kv = attributes.item(i).asInstanceOf[Attr]
            attributeMap ++= Map(kv.getName -> kv.getValue)
          })
          attributeMap ++= Map("name()" -> node.getNodeName)
          attributeMap ++= Map("innerText" -> node.getTextContent.trim)
          attributesList += attributeMap
        }
    
        if (node.getParentNode != null) {
          getParent(node.getParentNode)
        }
      }
      getParent(node)
      //返回一个从root到leaf的属性列表
      return attributesList.reverse
    
    }

    class GetDicValue(object):
        def __init__(self, d):
            for a, b in d.items():
                if isinstance(b, (list, tuple)):
                    setattr(self, a, [GetDicValue(x) if isinstance(x, dict) else x for x in b])
                else:
                    setattr(self, a, GetDicValue(b) if isinstance(b, dict) else b)
                    
  
3. java
 
           static public int getLength(String temp){
                Boolean flag=true;
                JSONObject jsonObject= JSONObject.fromObject(temp);
                Iterator iteratorValue=jsonObject.values().iterator();
                Iterator iteratorKey=jsonObject.keySet().iterator();
                while (iteratorValue.hasNext()){
                    String value=iteratorValue.next().toString();
                    System.out.println(iteratorKey.next()+":"+value);
                    if (value.startsWith("{")){
                        if (flag) {  //单层只记录一次
                            count++;
                            flag=false;
                        }
                        int tmp=getLength(value);
                        if (tmp>count)
                            count=tmp;
                    }
                }
                return count;
            }
   
   ： 
         static int maxDeep;
         
         	public static int getDeep(JSONObject jsonObject, int deepLength) {
         		if (jsonObject == null) {
         			return maxDeep = 0;
         		} else {
         			for (Map.Entry entry : jsonObject.entrySet()) {
         				Object obj = jsonObject.get(entry.getKey());
         				if (obj instanceof JSONObject) {
         					JSONObject obj1 = (JSONObject) obj;
         					deepLength = deepLength + 1;
         					getDeep(obj1, deepLength);
         				}
         			}
         			if (maxDeep <= deepLength) {
         				maxDeep = deepLength;
         			}
         			return maxDeep + 1;
         		}
         	};
4.  shell
    
    depth(){
    echo "$1" \
    sed 's#"[^"]*"##g'  \
    |  grep -oE  '{|}' \
    | awk '/{/{a+=1}/}/{a-=1}{if(max<a) max=a}{print max,a}END{print "max depth="max}'
    }  




## 参考：
+ https://testerhome.com/topics/17949%EF%BC%BD             