##   pwa/ native in JS  性能 （）
    
  ### 一个好的应用应该如何定义,
  主要有以下三方面：
  
  + 业务/功能
  
  + 符合逻辑的交互
  
  + 优秀的性能
  
  
  ### 用户体验的性能问题主要总结为4个类别
  
  + 流畅
  
  + 稳定
  
  + 省电、省流量
  
  + 安装包小
  
  ### 表層原因分析：
    性能问题的主要原因是什么，原因有相同的，也有不同的，但归根到底，
    不外乎内存使用、代码效率、合适的策略逻辑、代码质量、安装包体积这一类问题，整理归类如下：
  
  ![性能問題](https://github.com/PeterXiao/blog/blob/master/2019/4/images/20190403095936.png)
  
  从图中可以看到，打造一个高质量的应用应该以4个方向为目标：快、稳、省、小。
  快：使用时避免出现卡顿，响应速度快，减少用户等待的时间，满足用户期望。
  稳：减低 crash 率和 ANR 率，不要在用户使用过程中崩溃和无响应。
  省：节省流量和耗电，减少用户使用成本，避免使用时导致手机发烫。
  小：安装包小可以降低用户的安装成本。
  要想达到这4个目标，具体实现是在右边框里的问题：卡顿、内存使用不合理、代码质量差、代码逻辑乱、安装包过大，这些问题也是在开发过程中碰到最多的问题，在实现业务需求同时，也需要考虑到这点，多花时间去思考，如何避免功能完成后再来做优化，不然的话等功能实现后带来的维护成本会增加。
    
    



### 预先的性能参数：
+  性能指标之硬件占用： 70%  多核cpu 即为 < 核数*70%

+  网络IO/磁盘IO/内存占用同理。

+   网络带宽占用，硬件余量。




## 根因分析：
 
 为什么程序总是那么慢？它现在到底在干什么？时间都花到哪里去了？也许，你经常会抱怨这些问题。其实并不是每个Java程序都需要调优的。如果一个程序可以表现的和预期差不太多，就不必付出额外的精力去提高它的性能。

但是，理想和现实总是有差别的。由于以下原因都会导致：

1、框架搭建的不完善、程序设计上的缺失；

2、客户咄咄逼人的需求修改；

3、随着上线时间的临近，考虑时间优先原则，放弃了原有的开发原则；

4、程序员的盲目自信，感觉自己做的已经相当完美了；

  5、现代化设备的先进性，导致开发人员忽略资源合理利用的问题。

这些都导致了程序质量的下降，速度变慢甚至系统崩溃的原因。所以在某些不可控制的因素下，Java程序的性能优化显得尤为重要，弥补上述的不足。就好比你拍完了照片，需要ps修饰之后才发布在你的朋友圈是一样的道理。


##  准备

每个程序都有它自己独特的运作方式和不同的资源使用方式。正因如此，调优比写程序需要更多基础知识。例如，你需要熟悉虚拟机、操作系统和计算机架构。而当你面对在这些知识基础上编写的程序时，就能成功地对它进行调优。一般大致应该了解一下信息：

调优方向：设计调优 、代码调优 、JVM调优 、数据库调优 、操作系统调优

基本原则：Java程序在业务响应时间要求内执行计算任务的能力，程序在高容量下执行业务功能的能力，并具有可靠性高和延迟低的特点。

参考指标：执行时间、CPU时间、内存分配、磁盘吞吐量、网络吞吐量、响应时间

服务器资源：磁盘I/O、网络操作、CPU、内存



## 参考问题和方案处理主要内容：


###  过去Java EE性能问题的主要原因。

+ 缺少合适的容量计划。
+ Java EE 中间件环境规格说明不充分。
+ 过度的 Java 虚拟机垃圾回收。
+ 与外部系统过多或者很差的集成。
+ 缺少合适的数据库 SQL 调优和容量计划。
+ 对应用程序特定的性能问题。
   + 线程安全代码的问题。
  + 缺少通信 API 的超时处理。
  + I/O、JDBC 或者关系型持久 API 资源管理的问题。
  + 缺少合适的数据缓存。
  +  过度的数据缓存。
  + 过度的日志记录。 
+ Java EE 中间件调优问题。
+ 主动监控不充分。
+ 通用基础设备上硬件饱和。
+ 网络延迟问题。

### 针对这些问题，P-H 做出的建议包括：

+ 项目团队应该花足够的时间，为 Java EE 生产环境创建合适的运营模型。
+ 找到 Java EE 中间件规格的平衡点，像业务和运维团队提供足够的灵活性，以应对运行中断的情况。
+ 避免在 32 位的 JVM 中部署过多 Java EE 应用程序。中间件的设计可以处理多个应用程序，但是 JVM 可能不行。
+ 在需要的时候选择 64 位 JVM 替换 32 位的 JVM，但是要有合适的容量计划和性能测试，以确保硬件能够支持它。
+ 确保你的监控程序对 JVM 的垃圾回收有很好的理解。
+ 要记住，垃圾回收相关的问题可能不会再开发或者功能测试阶段发现。
+ 合适的容量计划包括负载和性能测试，在调优数据库环境的时候非常重要，它能够在 SQL 级别找到问题。
+ 如果你使用 Oracle 数据库，要确保 DBA 团队对 AWR 报告做出了评审。
+ 利用 JVM Thread Dump 和 AWR 报告找到运行缓慢的 SQL，并使用选定的监控工具来做同样的工作。
+ 确保花费足够时间来增强数据库环境的运行能力（磁盘空间、数据文件、REDO 日志、表空间等等），还要做出合适的监控和警告。
+ 评审你当前的 Java EE 环境监控能力，并找到提升的机会。
+ 你的监控解决方案应该尽可能覆盖端到端的环境，包括主动的警告。
+ 监控解决方案应该与容量计划过程保持一致。


+ 性能：
    相对参数与数据性能，
    
    
1.程序主要的性能瓶颈是：





##  参考：

+ https://www.infoq.cn/article/2012/09/javaee-performance
+ http://java.dzone.com/articles/top-10-causes-java-ee
+ http://www.ideadata.com.cn/wisdomAction/readWisdom.do?id=106


9999！