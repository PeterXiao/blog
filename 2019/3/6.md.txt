#  具体软件开发过程中----以计算机科学/工程上的的以规律为原因
##         -----如何避免把一种现象归结为根因的短路分析
              
    首先，第一次严肃和可证伪的，逻辑严密的科学研究： 牛顿爵士的[《自然哲学的数学原理》](https://en.wikipedia.org/wiki/Philosophi%C3%A6_Naturalis_Principia_Mathematica)
 
  这开创了一个真正的科学到来的时代。
  
    所有物理定律，都是在一定假设条件下，用严格的数学语言推导的。

  从这一点而言，物理学之后的大部分所谓的“科学”，尤其是离开数学越远的科学，越趋近于一种统计规律，一种事实验证，而不是“真正”的科学。
  
  明白了现在大部分科学的实际含义之后，我们再回过头来看一下计算机软件相关的三个科学：
  
  
  + [计算机科学](https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)
  
       计算机科学（英语：computer science，有时缩写为CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科
  
  + [计算机工程](https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F%E5%B7%A5%E7%A8%8B)
  
      计算机工程（英语：Computer engineering）一个以电机工程学和计算机科学的部分交叉领域为内容的工程学，其主要任务是设计及实现计算机系统
      
  +  [软件工程](https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B) 
   
       软件工程（英语：software engineering[1]），是软件开发领域里对工程方法的系统应用。  
  
  当然完整的计算机科学领域包括的范围很广，这里不一一列举，具体的可以参见wiki
  
   [计算机科学的领域](https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)  
   https://www.acm.org/publications/class-2012# 

再次缩小范围，我们来看一下具体到一个真正的软件开发过程之中最重要的几个定律：

架构阶段：
   最核心的定律：
   
   + [Conway's law 康威定律](https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B)
   
    具体内容：
           康威定律是马尔文·康威1967年提出的：
           "设计系统的架构受制于产生这些设计的组织的沟通结构。"
           
           ——M. Conway[1]
           即系统设计本质上反映了企业的组织机构。系统各个模块间的接口也反映了企业各个部门之间的信息流动和合作方式。
           
           康威定律源于模块的设计者需要互相之间频繁沟通。而跨部门交流比较难。[2]
           
           埃里克·雷蒙在《新黑客词典》中，称康威定律指出了软件架构与软件团队架构的等价（congruent）。例如，“如果你有4个团队在做一个编译器，你会得到一个4遍处理的编译器”。[3][4]
           
           James O. Coplien与Neil B. Harrison在《敏捷软件开发的组织模式》中写道:
           
           “如果团队、部门、子部门等的组织结构没有紧密反映产品的必要组成或产品组成的关系，那么项目将会遇到麻烦。因此，应该确保组织结构兼容于产品架构。”[5]
           
           康威的原文中提出的各定律[1]：
           
           第一定律 组织沟通方式会通过系统设计表达出来
           第二定律 时间再多一件事情也不可能做的完美，但总有时间做完一件事情
           第三定律 线型系统和线型组织架构间有潜在的异质同态特性
           第四定律 大的系统组织总是比小系统更倾向于分解
           
           Eric Hollnagel在2009年的《Efficiency-Effectiveness Trade Offs》一书中类似的论点：
           
              Problem too complicated? Ignore details.
              Not enough resources?Give up features.
           参见
      
      James O. Coplien和Neil B. Harrison说：
      
      “如果组织的各个部分（例如，团队，部门或子部门）没有密切反映产品的基本部分，或者组织之间的关系不能反映产品部件之间的关系，那么项目就会遇到麻烦...因此：确保组织与产品架构兼容。“ [6]
      
      人们还可以看到康威定律在企业网站设计中的影响。奈杰尔·贝文，一个可用性专家，在1998年指出：“企业经常会产生的内容和结构，反映了组织，而不是该网站的用户的需求的内部关注的网站。” [7] 当网站由委员会进行设计时，可能会发现类似的效果。[ 引证需要 ]
   
  ### 重点： 开源倡导者Eric S Raymond在The New Hacker's Dictionary中重述了Conway的法律，这是一个基于术语文件的参考书。他说，软件的组织和软件团队的组织将是一致的。Raymond在Conway的论文中总结了一个例子，他写道：“如果你有四个小组在编译器上工作，那么你将得到一个4遍编译器。” [4] [5]
  
  #### James O. Coplien和Neil B. Harrison说：
       
       “如果组织的各个部分（例如，团队，部门或子部门）没有密切反映产品的基本部分，或者组织之间的关系不能反映产品部件之间的关系，那么项目就会遇到麻烦...因此：确保组织与产品架构兼容。“ [6]
       
  # ~~**这决定了为什么需要做架构，为什么要使用微服务，为什么要根据不同的公司定制架构。**~~
   
   但是这是一个总结规律和描述规律的定律，而不是为什么成功的公司的IT系统表现出这种规律的根本原因。
     
 具体软件开发阶段：
        
+ [人月神话](https://zh.wikipedia.org/wiki/%E4%BA%BA%E6%9C%88%E7%A5%9E%E8%AF%9D)
  + 焦油坑
  + 人月神话 Brooks法则
  + 没有银弹 
  + 外科手术团队
  + 专制、民主与系统设计
  + 第二系统效应
  + 巴别塔为什么失败?
+ 墨菲定律

  “凡是可能出错，就一定出错。”

  这条定律来源于 Edward Murphy —— 一名航天工程师在 50 年代初对火箭测试失败的回应。这条定律给我们的启示是永远在系统关键地方使用防御性设计，因为系统某些地方总会出错！


+ [90-90法则](https://zh.wikipedia.org/wiki/90-90%E6%B3%95%E5%88%99)
  
   “	（开发软件时）前90%的代码要花费90%的开发时间，剩余的10%的代码要再花费90%的开发时间。
   The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.
   
   ”
   —— Tom Cargill，贝尔实验室
 
 +   Parkinson’s Law
 
     Work expands so as to fill the time available for its completion. 在工作能够完成的时限内，工作量会一直增加，直到所有可用时间都被填充为止
     
  +  Law of the instrument
    If all you have is a hammer, everything looks like a nail
    
    工具定律，锤子定律或马斯洛的锤子。
    
    表现为对一个熟悉的工具过度的依赖，“如果你有的只是一个锤子，那么所有的东西看起来都像一个钉子”以及一些由此转化的说法，来自于亚伯拉罕·马斯洛1966年发行的《科学的心理学》一书。
    
  +  Law of Propinquity
     The probability of two people communicating is inversely proportional to the distance between them.两个人交流的概率与他们之间的距离成反比。数字时代亦然。
     
     Cucumbers get more pickled than brine gets cucumbered. 当你进入一个环境，它会更多地影响你而不是相反
     
     the more we see people and interact with them, the more probable we are to like them.
     
     Twitter and the law of propinquity
     Bonus: Prescott’s Pickle Principle
   
  + 在软件工程领域也存在恩格尔定律：
    
       这个定律可以这样描述：一个软件产品的代码可以分为功能性代码和非功能性代码，如果功能性代码在整个代码中的比例越低，软件的成熟度就高，反之则越低。
   
         19世纪德国统计学家恩格尔根据统计资料，对消费结构的变化得出一个规律：一个家庭收入越少，家庭收入中（或总支出中）用来购买食物的支出所占的比例就越大，随着家庭收入的增加，家庭收入中（或总支出中）用来购买食物的支出则会下降。推而广之，一个国家越穷，每个国民的平均收入中（或平均支出中）用于购买食物的支出所占比例就越大，随着国家的富裕，这个比例呈下降趋势。
   
   
   可以看到大部分的软件工程实际直接相关的定律都是一种现象，一种优秀实践，而不是原因。 这些工程实践真正的原因要从沟通和人本身的问题上去找，
   如同牛顿的力学规律，导致人们可以从现象来生产仪器来检查力，从这样一些规律，我们也可以使用CMMI等模型，敏捷模型，IPD模型来判断一个组织完成软件工程的能力。
   
   但是，在决定性思考的，必须明白，你不能超越规律的同时，你也需要明白规律不是原因。 这才是一个真正有逻辑和判断能力的人所应该具有的品质。
   
   实事求是，矛盾论，唯物主义辨证法，辩证法的核心在于基于科学和足够的调查和现象下做的全面思考，而不是二逼一样的以邻为壑，自我封闭。
   
   所有的问题都基于一件事情：  没有科学和实际的调查，就没有发言权。
   
  
   
   
   # [参考]
   + 一万年太久，只争朝夕。
   + 没有调查，就没有发言权。---没有足够的调查，就没有发言权。
   + https://my.oschina.net/zijingshanke/blog/1186367
   + http://blog.jobbole.com/112474/
   
   
   ## 其二 如何避免把一种现象归结为根因的短路分析
   
      
   
   
   
   
       