#筆記

# [HTTP API开发工具](https://raw.githubusercontent.com/yosriady/api-development-tools/master/README.md)

＃＃ 介绍
这是用于构建RESTful HTTP + JSON API的有用资源的集合。那里有很多好工具和整个生态系统！如果不知道哪些选项可用，可能会让人不知所措，因此您可以将其作为参考起点。

贡献是最受欢迎的。类别也是开放的建议！

＃＃ 目录
* [API规范语言]（＃api-specification-languages）
* [API规范工具]（#api-specification-tools）
* [API规范]（＃api-specifications）
* [API框架]（＃api-frameworks）
* [API客户端开发工具]（＃api-client-development-tools）
* [API文档]（＃api-documentation）
* [API客户端]（＃api-clients）
* [API调试和模拟]（＃api-debugging-and-mocking）
* [API设计指南]（＃api-design-guides）
* [API Publishing]（＃api-publishing）
* [API网关]（＃api-gateway）
* [API安全]（＃api-security）
* [API监控]（＃api-monitoring）
* [API测试]（#api-testing）
* [API Developer Portal]（＃api-developer-portal）
* [JSON格式标准]（#json格式标准）
* [学习资源]（＃学习资源）
* [博客]（＃博客）
* [参考文献]（＃参考）

## API规范语言
-  [API蓝图]（https://github.com/apiaryio/api-blueprint）
-  [JSON Schema]（http://json-schema.org/）
-  [RAML]（https://raml.org/）
-  [OpenAPI（以前称为Swagger）]（https://github.com/OAI/OpenAPI-Specification）

## API规范工具
-  [Swagger Inspector]（https://swagger.io/swagger-inspector/）：测试并自动生成任何API的OpenAPI文档。
-  [Swagger Editor]（http://editor.swagger.io/）：设计Swagger规范的编辑器。
-  [Swagger工具和集成]（https://swagger.io/open-source-integrations/）：为Swagger生态系统提供服务的库和框架列表。
-  [OpenAPI Spec Tooling]（http://definitions.apievangelist.com/#Tools）：为OpenAPI生态系统提供服务的库和框架列表。
-  [API Studio]（http://apistudio.io/）。在线编写，模拟和分享您的Swagger规范。
-  [Dredd]（https://github.com/apiaryio/dredd）：根据API Blueprint的后端实现验证API文档。
-  [Restlet Studio]（https://restlet.com/modules/studio/）：用于API设计的Web IDE。
-  [API Spec Converter]（https://lucybot-inc.github.io/api-spec-converter/）：在不同的API规范格式之间进行转换。
-  [Prism]（http://stoplight.io/platform/prism/）：使用模拟，转换，验证等方法为任何OAS文件增压。
-  [Apimatic]（https://www.apimatic.io/）：支持API描述格式，包括Swagger，OAI格式，RAML，API蓝图，IO Docs，WADL，Postman Collections和HAR 1.4等
-  [Mulesoft Anypoint]（https://anypoint.mulesoft.com/）：使用RAML设计和发布企业级API
-  [Sandbox]（https://getsandbox.com/）：从API定义快速轻松地模拟RESTful API
-  [Restunited]（https://restunited.com/）：生成SDK，包含测试和调试的文档

## API规范
-  [API Commons]（http://apicommons.org/）：与语言无关的API规范/数据模型的存储库。
-  [APIS.guru]（https://apis.guru/openapi-directory/）：OpenAPI（aka Swagger）2.0格式的API规范目录。
-  [AnyAPI]（https://any-api.com/）：公共API的文档和测试控制台。

## API框架

### Ruby
-  [rails-api]（https://github.com/rails-api/rails-api）：仅限API应用程序的Rails。
-  [pliny]（https://github.com/interagent/pliny）：用于在Ruby中编写API的Opinionated模板Sinatra应用程序。
-  [grape]（https://github.com/ruby-grape/grape）：一种用于在Ruby中创建类似REST的API的自以为是的微框架。
-  [ActiveModel :: Serializer]（https://github.com/rails-api/active_model_serializers）：为您的JSON生成提供配置约定。
-  [rabl]（https://github.com/nesquena/rabl）：从任何ruby对象生成JSON和XML。
-  [jbuilder]（https://github.com/rails/jbuilder）：通过Builder风格的DSL创建JSON结构。
-  [roar]（https://github.com/trailblazer/roar）：使用表示器解析并呈现REST API文档。

### Python
-  [Django REST框架]（http://www.django-rest-framework.org/）：工具包，可以轻松构建Web API。
-  [Tastypie]（https://github.com/django-tastypie/django-tastypie）：Django的Webservice API框架。
-  [restless]（https://github.com/toastdriven/restless）：Python的轻量级REST miniframework。
-  [flask-restful]（https://github.com/flask-restful/flask-restful）：用于创建REST API的简单框架。
-  [Falcon]（https://github.com/falconry/falcon）：Falcon是一个低级，高性能的Python框架，用于构建HTTP API，app后端和更高级别的框架。
-  [Connexion]（https://github.com/zalando/connexion）：Swagger / OpenAPI在Flask之上的第一个Python框架，具有自动端点验证和OAuth2支持
-  [apistar]（https://github.com/encode/apistar）：专为Python3设计的智能Web API框架。
-  [sanic]（https://github.com/channelcat/sanic）：Sanic是一款类似Flask的Python 3.5+网络服务器，写得很快。
-  [hug]（https://github.com/timothycrosley/hug）：hug旨在使开发Python驱动的API尽可能简单，但并不简单。

### Javascript
-  [hapi.js]（https://hapijs.com/）：Node.js的Web和服务应用程序框架。
-  [Restify]（https://github.com/restify/node-restify）：Node.js REST框架专门用于Web服务API。
-  [Express]（https://expressjs.com/）：Node.js的快速，无偏见的极简主义Web框架。
-  [sailsjs]（http://sailsjs.org/）：Node.js的实时MVC框架。
-  [Actionhero]（https://www.actionherojs.com/）：具有集成群集功能和延迟任务的多传输Node.js API服务器。
-  [Baucis]（https://github.com/wprl/baucis）：构建
-  [Koa]（http://koajs.com/）：Node.js的下一代Web框架
-  [Loopback]（http://loopback.io/）：Node.js框架，用于创建API并轻松连接到后端数据源。
-  [Seneca]（http://senecajs.org/）：Node.js的微服务工具包。
-  [Feathers]（https://feathersjs.com/）：通过Socket.io或Primus构建RESTful和实时API。
-  [Deployd]（https://github.com/deployd/deployd）：Deployd是为网络和移动应用构建实时API的最简单方法
-  [Nest]（https://github.com/kamilmysliwiec/nest）：一个现代node.js框架，用于构建在TypeScript之上的高效且可扩展的Web应用程序

＃＃＃ 走
-  [Go-Json-Rest]（https://github.com/ant0ine/go-json-rest）：“net / http”顶部的薄层，有助于轻松构建RESTful API
-  [gocrud]（https://github.com/manishrjain/gocrud）：使用库来简化创建，更新和删除任意深度结构化数据 - 使构建REST服务变得快速而简单。
-  [困]（https://github.com/dougblack/sleepy）：用Go编写的RESTful微框架。
-  [restit]（https://github.com/go-restit/restit）：去微框架帮助编写RESTful API集成测试。
-  [go-relax]（https://github.com/codehack/go-relax）：构建RESTful API的可插拔组件框架。
-  [go-rest]（https://github.com/ungerik/go-rest）：Go的小而邪恶的REST框架。
-  [go-restful]（https://github.com/emicklei/go-restful）：用于构建restful API的声明性高度可读框架。
-  [Goat]（https://github.com/bahlo/goat）：Go中的简约REST API服务器。
-  [Resoursea]（https://github.com/resoursea/api）：用于快速编写基于资源的服务的REST框架。
-  [Zerver]（https://github.com/cosiner/zerver）：Zerver是一个富有表现力，模块化，功能完善的RESTful框架。

### Scala
-  [Colossus]（https://github.com/tumblr/colossus）：Scala的I / O和微服务库。
-  [Finatra]（https://twitter.github.io/finatra/）：在Twitter-Server和Finagle上构建的快速，可测试的Scala HTTP服务。
-  [Play]（https://www.playframework.com/）：Java和Scala的高速Web框架。
-  [Scalatra]（http://www.scalatra.org/）：简单，易用和免费的网络微框架。
-  [Skinny Micro]（https://github.com/skinny-framework/skinny-micro）：用于在Scala中构建servlet应用程序的Micro-web框架。
-  [Spray]（http://spray.io/）：用于在Scala和Akka之上构建基于REST / HTTP的集成层的开源工具包。
-  [Akka HTTP]（https://github.com/akka/akka-http）：Akka HTTP模块在akka-actor和akka-stream之上实现完整的服务器端和客户端HTTP堆栈。
-  [Swagger Akka HTTP]（https://github.com/swagger-akka-http/swagger-akka-http）：Swagger-Akka-Http为Akka-Http Apis带来Swagger支持。

### Java
-  [Rest.li]（http://rest.li/）：REST框架使用类型安全绑定和异步，非阻塞IO。
-  [Dropwizard]（http://www.dropwizard.io/1.0.0/docs/）：用于开发操作友好，高性能，RESTful Web服务的框架。
-  [Jersey]（https://jersey.java.net/）：Java中的RESTful Web服务。
-  [Spring Boot]（https://projects.spring.io/spring-boot/）：使用Spring的RESTful Web服务，需要高性能和少量配置。

### Haskell
-  [Scotty]（https://github.com/scotty-web/scotty）：使用WAI和Warp，受Ruby的Sinatra启发的微型Web框架。
-  [Spock]（https://github.com/agrafix/Spock）：另一个用于快速开发的Haskell Web框架。
-  [Servant]（https://github.com/haskell-servant/servant）：类型级Web DSL。
-  [Yesod]（https://github.com/yesodweb/yesod）：Haskell RESTful Web框架。

### Elixir
-  [Phoenix]（http://phoenixframework.org/）：构建HTML5应用程序，API后端和分布式系统的框架。
-  [插件]（https://github.com/elixir-plug/plug）：Web应用程序之间可组合模块的规范和便利。

### Erlang
-  [Cowboy]（https://github.com/ninenines/cowboy）：用Erlang编写的小型，快速，模块化的HTTP服务器。
-  [Gen Microservice]（https://github.com/videlalvaro/gen_microservice）：这个库解决了使用Erlang实现微服务的问题。
-  [Mochiweb]（https://github.com/mochi/mochiweb）：用于构建轻量级HTTP服务器的Erlang库。

### Postgres
-  [PostgREST]（https://github.com/begriffs/postgrest）：从任何现有的PostgreSQL数据库提供RESTful API。
-  [perst]（https://github.com/prest/prest）：perst是一种从Go编写的任何数据库中提供RESTful API的方法。

### MySQL
-  [xmysql]（https://github.com/o1lab/xmysql）：为任何MySQL数据库生成REST API。

### PHP
-  [API平台]（https://github.com/api-platform/api-platform）：基于Symfony的API框架，包含JSON-LD，Schema.org和Hydra支持
-  [Dingo API]（https://github.com/dingo/api）：用于Laravel和Lumen框架的RESTful API包
-  [Fractal]（https://github.com/thephpleague/fractal）：Fractal为复杂的数据输出提供了一个演示和转换层，就像在RESTful API中找到的那样，并且与JSON一起工作得非常好
-  [Yii2 Framework]（https://github.com/yiisoft/yii2）：提供一整套工具来简化实施RESTful Web Service API的任务

###其他
-  [Dream Factory]（https://github.com/dreamfactorysoftware/dreamfactory）：将任何数据库转换为API平台。

## API客户端开发工具

＃＃＃ 一般
-  [Swagger CodeGen]（https://github.com/swagger-api/swagger-codegen）：从符合Swagger的服务器自动生成客户端库。
-  [sdks.io]（https://sdks.io/）：探索自动生成的SDK。
-  [AutoRest]（https://github.com/Azure/autorest）：为RESTful Web服务生成客户端库
-  [Unirest]（http://unirest.io/）：用于多种语言的轻量级HTTP-Request客户端库
-  [OpenAPI Generator]（https://github.com/openapitools/openapi-generator）：Swagger Codegen的社区分支，根据OpenAPI / Swagger规范自动生成REST API的API客户端，服务器存根和文档。

### Ruby
-  [Net :: HTTP]（https://apidock.com/ruby/Net/HTTP）：Ruby的HTTP客户端API。
-  [faraday]（https://github.com/lostisland/faraday）：简单但灵活的HTTP客户端库，支持多个后端。
-  [rest-client]（https://github.com/rest-client/rest-client）：Ruby的简单HTTP和REST客户端
-  [heroics]（https://github.com/interagent/heroics）：用于以JSON模式表示的API的Ruby HTTP客户端。
-  [blanket]（https://github.com/inf0rmer/blanket）：Ruby API包装器。
-  [nestful]（https://github.com/maccman/nestful）：Ruby HTTP / REST客户端。

### Java
-  [Retrofit]（https://square.github.io/retrofit/）：适用于Android和Java的类型安全的HTTP客户端。

### Javascript
-  [Restangular]（https://github.com/mgonto/restangular）：Restangular是一个AngularJS服务，它使用最少的客户端代码简化了常见的GET，POST，DELETE和UPDATE请求

### .NET
-  [改装]（https://github.com/paulcbetts/refit）：用于.NET Core，Xamarin和.NET的自动类型安全REST库
-  [WebAnchor]（https://github.com/mattiasnordqvist/Web-Anchor）：Web Anchor提供对Web资源的类型安全，可测试和灵活的访问。

## API文档
-  [ReDoc]（https://github.com/Rebilly/ReDoc）：OpenAPI / Swagger生成的API参考文档。
-  [Swagger UI]（https://github.com/swagger-api/swagger-ui）：从符合Swagger的API动态生成文档。
-  [Slate]（https://github.com/lord/slate）：为您的API提供静态站点生成的文档。
-  [prmd]（https://github.com/interagent/prmd）：JSON Schema工具：从JSON Schema文档中构建脚手架，验证和生成文档。
-  [Aglio]（https://github.com/danielgtaylor/aglio）：具有主题支持的API Blueprint渲染器，可输出静态HTML。
-  [Apiary]（https://apiary.io/）：协作设计，即时API模拟，生成的文档，集成的代码示例，调试和自动化测试。
-  [自述文件]（https://readme.io/）：API文档托管。
-  [嵌入卷曲]（https://www.embedcurl.com/）：在网络上嵌入curl命令。
-  [Gelato]（https://gelato.io/）：为您的API创建开发人员门户。
-  [API Docs]（https://api-docs.io/）：OAS（Swagger）和RAML规范的托管公共API文档。
-  [Docula]（https://docu.la/）：使用Github和OpenAPI标准的文档。
-  [Docbox]（https://github.com/tmcw/docbox）：REST API文档生成器，使用Markdown。
-  [widdershins]（https://github.com/Mermade/widdershins）：来自OpenAPI 3.0 / Swagger 2.0 / AsyncAPI 1.x / Semoasa 0.1.0定义的REST API文档生成器

## API客户端

###托管
-  [Hurl.it]（https://www.hurl.it/）：基于Web的HTTP客户端。
-  [JSON Generator]（http://www.json-generator.com/）：生成并托管模拟JSON数据。

＃＃＃ 桌面
-  [HTTPie]（https://httpie.org/）：命令行HTTP客户端。
-  [HttpMaster]（https://www.httpmaster.net/）：用于REST API测试的桌面工具。
-  [Paw]（https://paw.cloud/）：适用于Mac的REST客户端。
-  [Postman]（https://www.getpostman.com）：桌面API测试工具。
-  [失眠]（https://insomnia.rest/）：适用于Mac，Windows和Linux的REST API客户端。
-  [Jsonium]（http://jsonium.org/）：基于HTTP协议的JSON的免费REST客户端
-  [我只是休息]（http://www.swensensoftware.com/im-only-resting）：用于REST API测试的Windows GUI工具

## API调试和模拟

###托管
-  [Beeceptor]（https://beeceptor.com）：用于其他API的HTTP代理 - 检查和构建模拟API。
-  [MockBin]（https://mockbin.com/）：生成模拟HTTP端点。
-  [RequestBin]（https://requestb.in/）：检查并调试webhook POST请求。
-  [httpbin]（http://httpbin.org）：用于测试HTTP请求的各种场景的模板化响应。

＃＃＃ 桌面 
-  [Json-Server]（https://github.com/typicode/json-server）完全假的REST API，零编码。
-  [Mockoon]（https://mockoon.com）：桌面API模拟工具。
-  [Postman]（https://www.getpostman.com/docs/postman/mock_servers/setting_up_mock）：桌面API客户端和模拟工具。


## API设计指南
-  [Google API设计指南]（https://cloud.google.com/apis/design/）
-  [PayPal API样式指南]（https://github.com/paypal/api-standards/blob/master/api-style-guide.md）
-  [Heroku Platform HTTP API设计指南]（https://github.com/interagent/http-api-design）
-  [Haufe API样式指南]（http://work.haufegroup.io/api-style-guide/）
-  [Microsoft REST API指南]（https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md）
-  [18F API标准]（https://github.com/18f/api-standards）
-  [RESTed NARWHL]（https://www.narwhl.com/）
-  [白宫Web API标准]（https://github.com/whitehouse/api-standards）
-  [Zalando REST API指南]（https://zalando.github.io/restful-api-guidelines/）
-  [API样式设计指南]（http://apistylebook.com/design/guidelines/）
-  [API样式设计主题]（http://apistylebook.com/design/topics/）
-  [Adidas-group API设计指南]（https://github.com/adidas-group/api-guidelines）

## API发布
-  [Mashape]（https://www.mashape.com/）：API Marketplace。

## API网关
-  [AWS API Gateway]（https://aws.amazon.com/api-gateway/）：流量管理，授权和访问控制，监控和API版本管理。
-  [API Umbrella]（https://apiumbrella.io/）：位于API前面的代理。
-  [APIAxle]（https://github.com/apiaxle/apiaxle/）：位于API前面的代理。
-  [APIGrove]（https://apigrove.github.io/apigrove/）：在Fuse ESB之上用Java构建的API管理器。
-  [Apigee127]（https://github.com/apigee-127/a127-documentation/wiki/What-is-Apigee-127）：基于nodejs的API网关
-  [图钉]（http://pushpin.org）：响应的请求/响应或流式传输（长轮询）的代理
-  [Strongloop]（https://github.com/strongloop/microgateway）：基于nodejs的API网关
-  [Fusio]（http://www.fusio-project.org/）：基于PHP的开源API管理平台
-  [Camel]（https://camel.apache.org/）：授权您使用各种特定于域的语言定义路由和中介规则，包括基于Java的流畅API，Spring或Blueprint XML配置文件，以及一个Scala DSL。
-  [HAProxy]（http://www.haproxy.org/）：可靠，高性能的TCP / HTTP负载均衡器。
-  [OpenResty]（https://openresty.org/）：构建在Nginx之上的快速Web应用程序服务器。
-  [Tengine]（http://tengine.taobao.org/）：Nginx的发行版，带有一些高级功能。
-  [Tyk]（https://tyk.io/）：开源，快速，可扩展的API网关，门户和API管理平台。
-  [Vulcand]（https://github.com/vulcand/vulcand）：由Etcd支持的程序化负载均衡器。
-  [Zuul]（https://github.com/Netflix/zuul）：提供动态路由，监控，弹性，安全性等的边缘服务。
-  [Kong]（https://getkong.org/）：用于API的开源管理层，提供高性能和可靠性。
-  [Janus]（https://github.com/hellofresh/janus）：一个用[Hello Fresh]编写的轻量级API网关（https://engineering.hellofresh.com）。
-  [fabio]（https://github.com/fabiolb/fabio）：一种快速，现代，零容量的负载均衡HTTP（S）路由器，用于部署由[consul]管理的微服务（https：//www.consul。 io）by eBay。
-  [Traefik]（https://github.com/containous/traefik）：Træfik（发音为traffic）是一个用Go编写的现代HTTP反向代理和负载均衡器。
-  [Oathkeeper]（https://github.com/ory/oathkeeper）：OIdentity＆Access Proxy（IAP），根据规则集授权HTTP请求。与ORY Hydra集成。

## API安全性
-  [API安全检查表]（https://github.com/shieldfy/API-Security-Checklist）：设计，测试和发布API时最重要的安全对策清单。
-  [Ory Hydra]（https://github.com/ory/hydra）：使用Go编写的OpenID Connect的OAuth2服务器。
-  [Approov]（https://approov.io/）：移动应用证明通过验证访问API的软件来禁止API滥用。用户身份验证还不够！

## API监控
-  [Runscope]（https://www.runscope.com/）：API性能监控。
-  [Galileo]（https://getgalileo.io/）：API监控平台。
-  [Ping-API]（https://ping-api.com/）：自动API测试。

## API测试
-  [Assertible]（https://assertible.com）：在部署和跨环境后连续测试和监控API。
-  [Pyresttest]（https://github.com/svanoort/pyresttest）：基于YAML的REST测试和API微基准测试工具
-  [OWASP Zaproxy]（https://github.com/zaproxy/zaproxy）：一种用于测试API的已知安全漏洞的工具，具有出色的CI集成。

## API Developer Portal
-  [Tyk]（https://tyk.io/features）：API网关之上的API Developer Portal，使您的API网关更易于开发人员使用。
-  [APIMATIC]（https://apimatic.io/developer-experience-portal）：使用SDK，实时代码示例，测试用例，API转换以及针对您的API量身定制的特定于语言的文档和参考，即时构建API门户。
-  [DWOLLA]（https://developers.dwolla.com）：用于ACH传输的简单而强大的API。
-  [Fusio]（https://www.fusio-project.org）：Fusio是一个开源API管理平台，有助于构建和管理REST API。Fusio提供了从不同数据源快速构建API的所有工具，但可以创建完整的自定义响应。
-  [Gravitee]（https://gravitee.io）：开源API平台，释放API的强大功能。
-  [Wicked Haufe]（https://wicked.haufe.io）：开源API管理。基于Mashape的Kong，node.js和docker的API管理的完整堆栈开源解决方案。

## JSON格式标准
-  [HAL]（http://stateless.co/hal_specification.html）
-  [JSONAPI]（http://jsonapi.org/faq/）
-  [JSON Schema]（http://json-schema.org/）
-  [Hydra]（http://www.hydra-cg.com/）
-  [离子]（https://github.com/ionwg/ion-doc）

##学习资源
-  [选择HTTP状态代码]（http://racksburg.com/choosing-an-http-status-code/）
-  [实践中的REST]（http://shop.oreilly.com/product/9780596805838.do）
-  [Roy Fielding关于REST的论文]（https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm）
-  [设计实用的RESTful API的最佳实践]（http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api）
-  [如何设计REST API]（https://blog.octo.com/en/design-a-rest-api/）
-  [自动API开发]（https://yos.io/2016/04/27/automated-api-development/）
-  [北欧API]（http://nordicapis.com/）
-  [未受干扰的REST]（https://www.mulesoft.com/sites/default/files/resource-assets/ebook-UndisturbedREST_v1.pdf）
-  [构建你不会讨厌的API]（https://leanpub.com/build-apis-you-wont-hate）
-  [不可抗拒的API]（https://www.manning.com/books/irresistible-apis）
-  [如何构建API]（https://apiary.io/how-to-build-api）
-  [API大学]（https://www.programmableweb.com/api-university）
-  [RESTful Web Services]（http://shop.oreilly.com/product/9780596529260.do）
-  [RESTful Web API]（http://shop.oreilly.com/product/0636920028468.do）
-  [优秀API文档的十大要点]（https://alistapart.com/article/the-ten-essentials-for-good-api-documentation）

##博客
-  [API Evangelist]（http://apievangelist.com/blog/）

##参考文献
-  [HTTP状态码参考]（https://httpstatuses.com/）

##贡献
[Pull Requests]（https://github.com/yosriady/api-development-tools/pulls）非常受欢迎！

添加新资源时，请写一个简短的一句话摘要。

＃＃ 谢谢
** api-development-tools **©2016 +，Yos Riady。根据[MIT]许可证发布。<br>
由Yos Riady在贡献者的帮助下撰写和维护（[list] [贡献者]）。

> [yos.io]（https://yos.io）＆nbsp;＆middot;＆nbsp;
> GitHub [@yosriady]（https://github.com/yosriady）

[麻省理工学院]：https：//mit-license.org/
[贡献者]：https：//github.com/yosriady/api-development-tools/contributors