標準化 可用性 簡單性是架構的核心原則

    現在很多的架構設計一開始只考慮了可用性和基本的前後端，最多加上mvc拆分，并且生搬硬套第三方公司的優秀實踐而不考慮公司與公司之間人員的差別，組織能力的差別。
                                 ----二三子言
            
     孙子曾经说过：将军的最终责任是机动进入成功的阵地。我们如何在软件实现这一点？这是我追求和寻找的东西。
                           ---Mattias Skarin
     “胜兵先胜而后战，败兵先战而后求胜。”，“昔之善战者，先为不可胜，以待敌之可胜”    
                                                  
   提綱
   
   1.現實的架構困境
   
   2.沒有出路的完全模仿
   
   3.提出問題？ 什麽才是公司最合適自己的架構
   
   4.描述問題背景
   
   5.分析問題提出人員以及其内在需求
   
   6.開始解決問題，抽象出一種模式，類似與循證醫學，FMEA，威脅建模這樣的模式進行分析。
   
   7.分析應用解決實例問題，并且考慮如何進化？          



1.現實的架構困境

    新的軟件系統需要將整個世界，還沒有標準化，并且難以標準化的世界，使用軟件和數字體系重新連接起來。
    
    
 2.沒有出路的完全模仿
    
     


架构师在面对复杂问题时，像很多人一样，首先会收集足够多的数据，然后将问题描述清楚。抽象来说，架构师处理复杂问题可分为三种基本方法：分解（分而治之）、抽象（大象无形）、知识库（见多识广）。



分解通常是按照一定的角度对系统进行拆分，角度通常是按照业务、功能和团队等方式来做。



抽象是屏蔽了细节的一种方式，就像大象无形，很多人真正把架构问题想透以后，抽象到最简单和基本的问题，就容易推动架构的演化。



利用知识库也是架构师重要的技能，利用互联网快速找到相关的信息，多学习别人走过的路，踩过的坑。



从上述来看，想成为一名有设计思想的架构师并不简单，它是集前端工程师+后端程序员+系统分析师+关键技术解决+各种技术搭配+设计模式+部署调优+其他于一身的技术人才，架构师堪称技术“多面手”，在成为一名优秀的架构师前，你需要懂前端技术、Fintech、大数据、容器与虚拟化等。




###### 《架构即未来》中最常用的15个架构原则

《架构即未来》这本书的第12章简单阐述了架构设计的一些常用的原则（后面章节会详细阐述）。这些原则中很多都是在架构一开始的设计中就要考虑进去的，这样在出现任何问题时，我们都能够及时的处理，和把问题影响的范围有效的缩小。否则就像我现在的项目，一开始设计时，考虑的很少，出问题时，没有做到及时的反馈，和缩小影响范围，只能在事故的代价中将所需要的原则添加进来，慢慢完善。

1.N+1设计
要确保任何你所开发的系统在发生故障时，至少有一个冗余的实例。

一个实例确实很危险，当这个实例出现不明原因的问题不能对外服务，需要debug的时候，如果优先debug，那当前实例就要暂停服务直到你找到问题为止。如果你直接重启实例恢复服务，就没有事故现场进行debug了。而这时如果有一个冗余的实例，就可以先让冗余的实例对外服务，事故现场的环境也得以保留。

多个实例来做负载均衡也是一种不错的选择。

2.回滚设计
确保系统可以回滚到以前发布过的任何版本。

以前做游戏的时候经常遇到回滚，有时候是数据库回滚，有时候是服务器端回滚，一般都是回滚到上个版本。

3.禁用设计
能够关闭任何发布的功能。

当一个功能出现严重问题不得不关闭时，如果关闭整个系统代价就有点大了，所有要有单个功能的开关。像商城系统的支付功能就一定要有开关，如果出现比较严重的bug，可以关闭支付而不影响下单。

4.监控设计
在设计阶段就必须要考虑监控，而不是在实施完成之后补充。

如果监控做的好，不仅能发现服务的死活，检查日志文件，还能收集系统相关的数据，评估终端用户的响应时间。如果系统和应用在设计和构建时就考虑好监控，那么即使不能自我修复，也至少可以自我诊断。

5.设计多活数据中心
不要被一个数据中心的解决方案把自己限制住。

有钱就多建一个，让股东放心。

6.只用成熟的技术
只用确实好用的技术。

不管用什么技术，都要确保是一个成熟的技术。也许某个新技术有众多优点，比如，降低开发成本，提高开发效率，提高可扩展能力，减少终端用户的响应时间。但是，只要这项技术故障率比较高，就绝不能使用。

7.异步设计
只有在绝对必要的时候才进行同步调用。

异步适合并发。

8.无状态系统
只有当业务确实需要的时候，才使用状态。

无状态的系统更利于扩展，更利于做负载均衡。

9.水平扩展非垂直升级
永远不要依赖更大、更快的系统。

微服务是水平扩展的一个例子，不要把所有的功能都集中在一个系统里面。必要的时候把需求分为多个系统，而不是升级原有的系统。

10.设计至少有两个步骤的前瞻性
在扩展性问题发生前考虑好下一步的行动计划。

想的更远一点，就能减少重构的次数。

11.非核心则购买
如果不是你最擅长的，也提供不了差异化的竞争优势则直接购买。

云服务这种的就购买好了。

12.使用商品化硬件
在大多数情况下，便宜的是最好的。

硬件这块儿，满足需求即可，在必要的时候增加配置。

13.小构建，小发布，快试错
全部研发要小构建，不断迭代，让系统不断地成长。

小版本的失败率较低，因为失败率与解决方案中的变更数量直接相关。

14.隔离故障
实现隔离故障设计，通过断路保护避免故障传播和交叉影响。

避免多系统之间的互相影响，这个很重要。

15.自动化
设计和构建自动化的过程。如果机器可以做，就不要依赖于人。

人常犯错误，更令人沮丧的是，他们往往会以不同的方式多次犯同样的错误。

###### 設計原本筆記

设计的疑问

对一种技艺进行观察，并将所思所想运用到另一种技艺中，使得诸般妙用在一人的头脑中不断反思（新思维就不期而至了）。——培根



设计过程本身真的有这样不变的、放诸各种设计领域而皆准的属性吗？

《牛津英文词典》对设计这个动词的定义如下：
形成计划或方案，在头脑中整理或构思.......以备后续执行。

这一定义的要点在于计划、在头脑中和后续执行。
1.a design(一个设计是一个受造的事物)
2.design(设计过程，不加任何冠词)
3.to design(动词的设计)



设计理念（Design Concept），设计的概念完整性

作者对开发IBM System/360体系结构认为：实在的System/360，就是设计理念本身，即那台柏拉图式的理想机器。那些在工程基础上建造出来的、物理或电子意义上的Model
50、Model 60、Model 70和Model 90等机型，不过就是柏拉图说的那样，是那台实在的Systen/360的影子。

而实在的System/360最完整、最忠实的化身，并不在那些芯片或金属元件里，而是《IBM System/360 Principles of Operation》这本给程序员参考的机器语言手册的文字和图表里。



设计理念的价值何在？

*伟大的设计都具备概念完整性——统一、经济、简洁。
*经常提及设计理念，对于设计团队的内部沟通也有极大的帮助。

如果设计理念本身就是焦点，而不是拐弯抹角的表达或残缺不全的细节，那么沟通就可以非常直截了当。

因此，电影制片人都使用故事板（storyboard）来将他们的设计讨论的关注点始终保持再设计理念上，而不会陷入实现细节。



设计的疑问

对一种技艺进行观察，并将所思所想运用到另一种技艺中，使得诸般妙用在一人的头脑中不断反思（新思维就不期而至了）。——培根



设计过程本身真的有这样不变的、放诸各种设计领域而皆准的属性吗？

《牛津英文词典》对设计这个动词的定义如下：
形成计划或方案，在头脑中整理或构思.......以备后续执行。

这一定义的要点在于计划、在头脑中和后续执行。
1.a design(一个设计是一个受造的事物)
2.design(设计过程，不加任何冠词)
3.to design(动词的设计)



设计理念（Design Concept），设计的概念完整性

作者对开发IBM System/360体系结构认为：实在的System/360，就是设计理念本身，即那台柏拉图式的理想机器。那些在工程基础上建造出来的、物理或电子意义上的Model
50、Model 60、Model 70和Model 90等机型，不过就是柏拉图说的那样，是那台实在的Systen/360的影子。

而实在的System/360最完整、最忠实的化身，并不在那些芯片或金属元件里，而是《IBM System/360 Principles of Operation》这本给程序员参考的机器语言手册的文字和图表里。



设计理念的价值何在？

*伟大的设计都具备概念完整性——统一、经济、简洁。
*经常提及设计理念，对于设计团队的内部沟通也有极大的帮助。

如果设计理念本身就是焦点，而不是拐弯抹角的表达或残缺不全的细节，那么沟通就可以非常直截了当。

因此，电影制片人都使用故事板（storyboard）来将他们的设计讨论的关注点始终保持再设计理念上，而不会陷入实现细节。



工程师怎样进行设计思维——理性模型

......因为设计的理论是普通的搜索理论......即在巨大的组合空间搜索。——Herbert Simon《The Science of the Artificial》



理想的设计过程模型 如图所示

####參考
[https://www.phodal.com/blog/micro-architecture-in-real-world/](https://www.phodal.com/blog/micro-architecture-in-real-world/)

#### 附注

[Real World Kanban 作者访谈](https://www.infoq.cn/article/book-review-real-world-kanban)

[分享book@github](https://codeload.github.com/sjyuan-cc/programming-books)

[架构之美](http://product.dangdang.com/20733672.html)

[設計原本](https://www.google.com/search?hl=zh-CN&q=%E8%AE%BE%E8%AE%A1%E5%8E%9F%E6%9C%ACpdf&sa=X&ved=2ahUKEwjWzY3p_q_gAhVowlQKHfl1DR0Q1QIoAHoECAYQAQ&biw=1920&bih=1008)

[架構即未來](http://www.ebook23.com/thread-199-1-1.html)

[API标准化成为技术团队面临的最大挑战](https://mp.weixin.qq.com/s/FC3OmZVPWisZUoFOXBmcFA)

[开源软件架构](https://www.kancloud.cn/kancloud/open-source-architecture/53158)

[The Architecture of Open Source Applications.mobi](https://github.com/PeterXiao/blog/blob/master/2019/2/files/The%20Architecture%20of%20Open%20Source%20Applications.mobi)

[The Architecture of Open Source Applications, Volume II - Structure, Scale, and a Few More Fearless Hacks.mobi](https://github.com/PeterXiao/blog/blob/master/2019/2/files/The%20Architecture%20of%20Open%20Source%20Applications%2C%20Volume%20II%20-%20Structure%2C%20Scale%2C%20and%20a%20Few%20More%20Fearless%20Hacks.mobi)





设计的疑问

对一种技艺进行观察，并将所思所想运用到另一种技艺中，使得诸般妙用在一人的头脑中不断反思（新思维就不期而至了）。——培根



设计过程本身真的有这样不变的、放诸各种设计领域而皆准的属性吗？

《牛津英文词典》对设计这个动词的定义如下：
形成计划或方案，在头脑中整理或构思.......以备后续执行。

这一定义的要点在于计划、在头脑中和后续执行。
1.a design(一个设计是一个受造的事物)
2.design(设计过程，不加任何冠词)
3.to design(动词的设计)



设计理念（Design Concept），设计的概念完整性

作者对开发IBM System/360体系结构认为：实在的System/360，就是设计理念本身，即那台柏拉图式的理想机器。那些在工程基础上建造出来的、物理或电子意义上的Model
50、Model 60、Model 70和Model 90等机型，不过就是柏拉图说的那样，是那台实在的Systen/360的影子。

而实在的System/360最完整、最忠实的化身，并不在那些芯片或金属元件里，而是《IBM System/360 Principles of Operation》这本给程序员参考的机器语言手册的文字和图表里。



设计理念的价值何在？

*伟大的设计都具备概念完整性——统一、经济、简洁。
*经常提及设计理念，对于设计团队的内部沟通也有极大的帮助。

如果设计理念本身就是焦点，而不是拐弯抹角的表达或残缺不全的细节，那么沟通就可以非常直截了当。

因此，电影制片人都使用故事板（storyboard）来将他们的设计讨论的关注点始终保持再设计理念上，而不会陷入实现细节。



工程师怎样进行设计思维——理性模型

......因为设计的理论是普通的搜索理论......即在巨大的组合空间搜索。——Herbert Simon《The Science of the Artificial》



理想的设计过程模型 如图所示



