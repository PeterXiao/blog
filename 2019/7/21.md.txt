##  The Architecture : What every software engineer should understand the unified abstraction of a sustainable evolution architecture
     架构分治 ：每个软件工程师应该了解可持续演进架构的统一抽象
     再读《人月神话》
### 诺特定律 对称与破缺

“相较于用简单语言表达的深刻思想和开创性的结果，被精巧语言结构掩盖的肤浅思想和糟糕的结果有更多的机会被发表和变得流行。”—《信息论 本质 -多样性-统一》

### 一些错误观念
+ 大部分人有一种错觉，只要一个部分快了，就是整体快了？ 在软件工程里面，只要抱有这个观念，最终的结果一定很难看。
+ 除非边界严格隔离了变化的影响，否则任何组织内部或者代码内部的变化都会影响第三方。
### 
   + 近7年时间经过多种不同类型的公司，很多个各种历史遗留和全新的项目。从那个时候开始，我就开始考虑单体的，巨型的架构的问题，并且大量阅读业界的新兴的新的成功或者失败的架构实践--微服务 SOA  中台架构 docker架构 康威定律等等---其中最让人记忆深刻的就是TCP/ip协议簇（OSI七层模型和TCP/IP四层模型）。 这是一段让人兴奋和愤怒的时间：看到了种种失败却强迫使用的架构实践，人肉运维和润滑和架构实施过程；也有少部分成功的变化--但是这些变化几乎都是在3-5个人的国内团队完成的。
     ，
     从这一切里我们体会到的最有益的原则是我们构建的成功和失败的东西的核心差异里面都包含了一个简单的理念：分治（基于边界/包装和抽象的分治），分治几乎在工程（工具）产生的时候就存在，同时它也是实际的组织和经济系统的组织方式。
   +  

### 基本規範

 +  
 +  
 
###  一點specs
  +  度量基於組織能力，需要進化，但是必須要有基準， 沒有架構改進前，30%項目在基準之上。
  +  

### 
 https://www.trueos.org/downloads/
 
 
 
 软件系统复杂性应对
 解决复杂和大规模软件的武器可以被粗略地归为三类：抽象、分治和知识。
 
 分治 把问题空间分割为规模更小且易于处理的若干子问题。分割后的问题需要足够小，以便一个人单枪匹马就能够解决他们；其次，必须考虑如何将分割后的各个部分装配为整体。分割得越合理越易于理解，在装配成整体时，所需跟踪的细节也就越少。即更容易设计各部分的协作方式。评判什么是分治得好，即高内聚低耦合。
 
 抽象 使用抽象能够精简问题空间，而且问题越小越容易理解。举个例子，从北京到上海出差，可以先理解为使用交通工具前往，但不需要一开始就想清楚到底是高铁还是飞机，以及乘坐他们需要注意什么。
 
 知识 顾名思义，DDD可以认为是知识的一种。
 
 DDD提供了这样的知识手段，让我们知道如何抽象出限界上下文以及如何去分治。
 
 UED、UCD、UE、UI、交互设计
 
 +  
 +  
 + 
 + 
 + 
 
 
    
 ###  参考书籍
 
 +  https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F
 +  https://en.wikipedia.org/wiki/Internet_protocol_suite
 +   恰如其分的软件架构
 +   开源软件架构
 +  《Clean Architecture》(清晰架构)，副标题叫『一个工匠的软件结构与设计指南』，
 +  https://martinfowler.com
 +  微服务设计
 +  重构
 +  jdon网站
 +


### 大纲

近6年时间经过多种不同类型的公式，很多个各种历史遗留和全新的项目。从那个时候开始，我就开始考虑单体的，巨型的架构的问题，并且大量阅读业界的新兴的新的成功或者失败的架构实践--微服务 SOA  中台架构 docker架构 康威定律等等---其中最让人记忆深刻的就是TCP/ip协议簇（OSI七层模型和TCP/IP四层模型）。 这是一段让人兴奋和愤怒的时间：看到了种种失败却强迫使用的架构实践，人肉运维和润滑和架构实施过程；也有少部分成功的变化--但是这些变化几乎都是在3-5个人的国内团队完成的。
，
从这一切里我们体会到的最有益的原则是我们构建的成功和失败的东西的核心差异里面都包含了一个简单的理念：分治（基于边界/包装和抽象的分治），分治几乎在工程（工具）产生的时候就存在，同时它也是实际的组织和经济系统的组织方式。



第一点： 架构分治是什么
  +  越大的组织越倾向于分解成小组织，越大的系统越倾向于分解成小系统。
  + [康威定律](https://en.wikipedia.org/wiki/Conway%27s_law)

  + 基本的工程原理  如何建设城市，规划分解成一个个小区，各个区块分别独立建设，但是，整个通道的规划，区域的用途，还是有大的原则设计的。 而大的系统的构建也应该一样，需要规划和明确的边界。

  + 实际人员能力的限制
     单个class  单个函数 单个系统的代码量超过一定程度，复杂性就会超过一般人的理解能力，既然不能理解一个系统，更不用是如何维护和改进一个系统，添加新功能了。


第二点： 系统集成 ： 实际基是数据的集成。
详细可以参见 [The Log](https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying)

 系统集成的哲学和空间含义：

   基于时间的： 时序  span  实际的键值和去重 以及事务保证是基于 一致的时间序列。

   基于空间的： 分布式并行  多核 多线程 多纤程序模型 实际是数据流或者处理分布到多机器系统处理

   基于时间和空间的  数据库 事务模型  数据的事务机制。

   基于符号表达的： 函数式 数学公式证明式样程序模块 lambda运算的时间空间无关性，但是这种抽象不包括持久化过程。  最合适的就是DDD + 6边形架构 中加入接口专门用于数据持久化，而不是直接污染无副作用函数。

第三点： 系统架构与业务架构 中台治理等
  
  系统架构是实际IT系统生命周期，以及理解系统的模型

  业务架构 是公司如何进行经济活动的盈利模型

  中台是IT架构和业务架构结合的高层次抽象模型 基础上再集成？


第四部分:  系统建设 规范 包装 抽象 知识  参考对象 k8s/knative with docker架构   tcp/ip架构  x86 架构， 

到现在最成功的思维模型： 数学模型
            精神模型： 从多神到一神的模型
            建筑模型： 力矩和杠杆
            IT硬件模型： 360/system 以及之后抽象的PC架构
            驱动模型： windows HAL抽象 
            数据传输模型： TCP/IP协议族
            操作抽象： restful（基于HTTP关键字和linux资源抽象原理）
            部署模型： 基于image的docker
            业务模型： 小组自治的松散结合模型。

咋就有不少人认为自己维护设计同这个摩天大厦差不多复杂度的软件系统很简单了？

   人员的标准化早就失败了，没有银弹的另外一个意思就是技术 语言的标准化也已经失败， 敏捷变成僵化的流程的时候，所谓组织创新的革命性作用在软件工程上也已经失效。 so？  问题出现在哪里呢？ 为什么种种灵丹妙药最后总是失效了？
 这里的失效不是没有作用那种失效，而是新的解决办法并没有解决最根本的问题， Iwant more，but I cant do these more。 不能简单地把各个人的工作堆积到一起 计算开发交付能力。也就是无法实现建筑和医学上的并发优势（一个组织就可以救治一个病人，基本线性增长的服务能力（100-800以下））。

错误的估计复杂度，没有良好规划的分区城市，和软件工程的实际情况是一致的。 到底是什么导致人们总会错误的估计复杂度？ 因为不可见，所以认为简单？  如同
不同于你绝对不会认为600M的摩天大厦随便什么人什么公司都可以建造一样，一般人总以为10%的人都是有能力设计一个复杂的软件系统？  实质而言 实际而言，1%的人不具有这样的能力。否则到现在还大规模使用的架构（copy 在软件虚拟领域成本很低）
是如此的稀少。 因此大部分的所谓的架构师的核心能力可以称为 copy架构工程师。

实际架构问题的的根本原因： 复杂度低估，直接生搬硬套其他公司的架构，隔离和包装的失效。

实际而言，缝缝补补已经无济于事的情况下，如何解决现在的问题？ 回到问题的最初始情况--
软件工程的问题的初始情况 《人月神话》 的解决办法是：  手术小组  没有银弹 ：---敏捷。
康威定律的解决办法是：镜像定律（DDD 微服务 soa 实际都是基于此）



基本原则：

没有银弹 不仅仅是计算机工程，实际成为一切工程的第一定律。

搞定数据和性能  测试接入 基本的问题 框架的问题

搞定业务和单元测试  业务的问题

架构包装和分割  康威定律与组织配套



数据？ function programming DDD 
1.策略 事实 临时方案和技术债务1.策略 事实 临时方案和技术债务